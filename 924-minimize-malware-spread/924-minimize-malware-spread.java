class Solution {
    int[] par;
    int[] population;
    
     public int findPar(int u)
    {
        if(par[u] == u)
        {
            return u;
        }
        else
        {
            return par[u] = findPar(par[u]);
        }
    }
    
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
        int n= graph.length;
        par = new int[n];
        population = new int[n];
        
        for(int i=0;i<n;i++)
        {
            par[i] = i;
            population[i] =1;
        }
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(graph[i][j] == 0 || i == j) continue;
                
                int p1 = findPar(i);
                int p2 = findPar(j);
                
                if(p1!=p2)
                {
                    par[p1] = p2;
                    population[p2] += population[p1];
                }
            }
        }
        
        int[] infectedCount = new int[n];
        
        for(int e : initial)
        {
            int p = findPar(e);
            infectedCount[p]++;
        }
        
        Arrays.sort(initial);
        
        int maxPopulation= 0;
        int ans = initial[0];
        for(int ele : initial)
        {
            int p =findPar(ele);
            
            if(infectedCount[p] == 1  && population[p] > maxPopulation)
            {
                ans = ele;
                maxPopulation = population[p];
            }
        }
        
        return ans;
        
        
    }
}